//AUTHOR: Megan Lunan
//COURSE: CPT 187
//PURPOSE: Program creates an order for store items selection. An order report is generated at the end of an order. When the user quits a final report with all orders' detail generated. 
//CREATEDATE: 20210420

package edu.cpt187.lunan.exercise6a;
//import scanner
import java.util.Scanner;

//start of main class
public class Main 
{


	//main class constants
	public static final char[] MENU_CHARS = {'A', 'B','Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B','R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	//start of main method
	public static void main(String[] args) 
	{
		//supportive class Order
		Order currentOrder = new Order();

		//supportive class Inventory
		Inventory currentInventory = new Inventory();

		//supportive class Write Order
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		//supportive class Write Order
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//scanner
		Scanner input = new Scanner(System.in);
		//local variables
		String userName = ""; 
		char menuSelection = ' ';

		//welcome banner
		displayWelcomeBanner();

		//PRIME READ of main menu
		menuSelection = validateMainMenu(input);

		//run while main menu not Quit
		while (menuSelection != 'Q')
		{

			currentUser.setUserAccountArrays();

			//get userName
			userName = getUserName(input);


			//test if selection is not A
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);

				//start test user search index greater or equal to 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//END OF test user search index greater or equal to 0
				//start else
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));

					displayAccountResults();
				}//END OF else
			}//END OF if selection is not A
			//start of else A
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));

				//start test search index less than 0
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//END OF test search index less than 0
				//start of else
				else
				{
					menuSelection = validateFileSelection(input);

					//start while menu not R
					while (menuSelection != 'R')
					{
						//test if selection is A
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));

							//start test if record count less or equal 0
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//END OF test if record count less or equal 0
							//start else 
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//END OF else 

						}//END OF test if selection is A
						//start else menu selection not A
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));

							//start if item search index less than 0
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//END OF if item search index less than 0
							//start else
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());

								currentOrder.setItemID(currentInventory.getItemIDs());

								currentOrder.setItemName(currentInventory.getItemNames());

								currentOrder.setItemPrice(currentInventory.getItemPrices());

								currentOrder.setHowMany(validateHowMany(input));

								//start if in stock count less than how many
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//END OF if in stock count less than how many
								//start else in stock
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									currentOrder.setDiscountRate(currentInventory.getDiscountRates());

									currentOrder.setDecreaseInStock(currentInventory);

									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									//start test if discount rate is greater than zero
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END OF test if discount rate is greater than zero
									//start of else no discount
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END OF else no discount
								}//END OF else in stock
							}//END OF else search index greater than 0
						}//END OF else menu selection not A

						//menuSelection = validateFileSelection(input);
						menuSelection = validateFileSelection(input);
					}//END OF while menu not R

				}//END OF else

			}//END OF of else A

			//return to main menu
			menuSelection = validateMainMenu(input);
		}//END OF main menu not Quit

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		//test total cost before printing final report
		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//END OF total cost test

		//farewell message
		displayFarewellMessage();

		//close Scanner
		input.close();

	}//END OF main method



	//VOID METHODS
	//start of welcome banner method
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the Store Order System!");
		System.out.println("This program captures the item, number of items,");
		System.out.println("and membership status. Then it will calculate any discounts");
		System.out.println("and total with tax. Maybe you'll even get a prize!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"); //character limit ruler 60char
	}//END OF welcome banner method

	//start of farewell message method
	public static void displayFarewellMessage()
	{
		System.out.println("");
		System.out.println("Thank you for shopping with us!");
		System.out.println("Enjoy your day!");
	}//END OF farewell message method

	//display main menu
	public static void displayMainMenu()
	{
		int localIndex = 0;

		//main menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");

		while (localIndex < MENU_CHARS.length)
		{
			System.out.printf("%-2s%4s%-15s\n", MENU_CHARS[localIndex], "for ", MENU_OPTIONS[localIndex]);
			//LVC
			localIndex++;
		}//END OF print main menu
		//menu prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		System.out.print("Enter your selection here: ");
	}//END OF displayMainMenu


	//display file menu
	public static void displayFileMenu()
	{
		int localIndex = 0;

		//main menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");

		while (localIndex < FILE_MENU_CHARS.length)
		{
			System.out.printf("%-2s%4s%-15s\n", FILE_MENU_CHARS[localIndex], "for ", FILE_MENU_OPTIONS[localIndex]);
			//LVC
			localIndex++;
		}//END OF print main menu
		//menu prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		System.out.print("Enter your selection here: ");
	}//END OF file menu


	//display discount menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRate)
	{
		int localIndex = 0;

		//discount menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");

		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-2s%4s%-13s%4.1f%2s\n", SUB_MENU_CHARS[localIndex], "for ", borrowedDiscountNames[localIndex], borrowedDiscountRate[localIndex]*100, "%");
			//LVC
			localIndex++;
		}//END OF print menu
		//menu prompt
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		System.out.print("Please make your selection here: ");
	}//END OF discount menu


	//start of order report discount method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		//Display results
		//report header
		System.out.println("");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		//display output in columns
		System.out.printf("%-20s%-15s\n\n", "Customer Name: ", borrowedUserName);

		System.out.printf("%-20s%-15s\n", "Item Name: ", borrowedItemName);
		System.out.printf("%-20s%-2s%8.2f\n\n", "Item Price: ", "$", borrowedItemPrice);

		System.out.printf("%-20s%-15s\n", "Discount Name: ", borrowedDiscountName);
		System.out.printf("%-20s%9.1f%2s\n", "Discount Rate: ", borrowedDiscountRate * 100, "%");
		System.out.printf("%-20s%-2s%8.2f\n", "Discount Amount: ", "$", borrowedDiscountAmt);
		System.out.printf("%-20s%-2s%8.2f\n\n", "Discount Price: ", "$", borrowedDiscountPrice);

		System.out.printf("%-20s%8s\n\n", "Quantity: ", borrowedHowMany);

		System.out.printf("%-20s%-2s%8.2f\n", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-20s%9.1f%2s\n", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("%-20s%-2s%8.2f\n\n", "Tax Amount: ", "$", borrowedTaxAmt);

		System.out.printf("%-20s%-2s%8.2f\n\n", "Order Total: ", "$", borrowedTotalCost);

		System.out.printf("%-20s%-15s\n", "Prize: ", borrowedPrizeName);

		System.out.printf("%-20s%-3d%-20s%-15s\n", "Buy more now: Only ", borrowedInStockCounts, borrowedItemName + "s", " left in-stock!");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
	}//END OF order report discount method

	//start of order report no discount method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		//Display results
		//report header
		System.out.println("");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		//display output in columns
		System.out.printf("%-20s%-15s\n\n", "Customer Name: ", borrowedUserName);

		System.out.printf("%-20s%-15s\n", "Item Name: ", borrowedItemName);
		System.out.printf("%-20s%-2s%8.2f\n\n", "Item Price: ", "$", borrowedItemPrice);

		System.out.printf("%-20s%8s\n\n", "Quantity: ", borrowedHowMany);

		System.out.printf("%-20s%-2s%8.2f\n", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-20s%9.1f%2s\n", "Tax Rate; ", borrowedTaxRate * 100, "%");
		System.out.printf("%-20s%-2s%8.2f\n\n", "Tax Amount: ", "$", borrowedTaxAmt);

		System.out.printf("%-20s%-2s%8.2f\n\n", "Order Total: ", "$", borrowedTotalCost);

		System.out.printf("%-20s%-15s\n\n", "Prize: ", borrowedPrizeName);

		System.out.printf("%-20s%-3d%-20s%-15s\n", "Buy more now: Only ", borrowedInStockCounts, borrowedItemName + "s", " left in-stock!");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
	}//END OF order report no discount method


	//start of final report method
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int locaItemlIndex = 0;

		System.out.println("");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		System.out.printf("%-4s%-23s%-12s%-6s%-10s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");

		while (locaItemlIndex < borrowedRecordCount)
		{
			System.out.printf("%-4d%-23s%-2s%-10.2f%-6d%-2s%8.2f\n", borrowedItemIDs[locaItemlIndex], borrowedItemNames[locaItemlIndex], "$", borrowedItemPrices[locaItemlIndex], borrowedOrderQuantities[locaItemlIndex], "$", borrowedOrderTotals[locaItemlIndex]);
			//LVC
			locaItemlIndex++;
		}//END OF print final report
		System.out.println("");
		System.out.printf("%-15s\n", "GRAND TOTAL");
		System.out.printf("%-2s%10.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");

		borrowedRecordCount++;
	}//END OF final report

	//start of display records loaded from file message
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-5d%-20s\n", borrowedRecordCount, " records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display records loaded from file message


	//start of display Out Of Stock message
	public static void displayOutOfStock()
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display display Out Of Stock message


	//start of display file error message
	public static void displayFileError()
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display file error message


	//start of display not found error message
	public static void displayNotFound()
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display not found error message


	//start of display account results account created
	public static void displayAccountResults()
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display account results account created

	//start of display account results account not created
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username: " + borrowedUserName + " already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display account results account not created

	//displayLoginError
	//start of display login error
	public static void displayLoginError()
	{
		System.out.println("");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF display login error


	//VR METHODS
	//start of get user name method
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";	//ask for customer's first name

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please enter your first name: ");
		localUserName = borrowedInput.next();
		System.out.println();

		//return userName
		return localUserName;
	}//END OF userName method


	//start of get user name method
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";	//ask for customer's password

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please enter your password: ");
		localPassword = borrowedInput.next();
		System.out.println();

		//return userName
		return localPassword;
	}//END OF userName method


	//start validate main menu
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validate selection
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			//error message
			System.out.println("\n~~ERROR: Invalid selection.~~");
			//update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF validate selection
		return localSelection;
	}//END OF validate main menu


	//validateFileSelection
	//start validate main menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validate selection
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			//error message
			System.out.println("\n~~ERROR: Invalid selection.~~");
			//update read
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF validate selection
		return localSelection;
	}//END OF validate main menu


	//start validate how many
	public static String validateHowMany(Scanner borrowedInput)
	{
		//prime read
		System.out.print("Please enter a quantity: ");
		int localHowMany = borrowedInput.nextInt();
		//validate selection
		while (localHowMany <= 0)
		{	
			//error message
			System.out.println("\n~~ERROR: Invalid quantity.~~");
			//update read
			System.out.print("Please enter a quantity: ");
			localHowMany = borrowedInput.nextInt();
		}//END OF validate selection
		return String.valueOf(localHowMany);
	}//END OF validate how many

	//start validate discount menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountName, double[] borrowedDiscountRate)
	{
		char localSelection = ' ';
		//prime read
		displayDiscountMenu(borrowedDiscountName, borrowedDiscountRate);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validate selection
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			//error message
			System.out.println("~~ERROR: Invalid selection.~~");
			//update read
			displayDiscountMenu(borrowedDiscountName, borrowedDiscountRate);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF validate selection
		return localSelection;
	}//END OF validate discount menu

	//start of get file name input
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the file name with extention (i.e. file.txt): ");	
		localFileName = borrowedInput.next();
		System.out.println();

		return localFileName;
	}//END OF get file name input

	//start of validate search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localID = 0;

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");	
		localID = borrowedInput.nextInt();
		//validate selection
		while(localID < 0)
		{
			//error message
			displayNotFound();
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the search value: ");	
			localID = borrowedInput.nextInt();
		}//END OF validate
		return localID;
	}//END OF validate search value
}//END OF main class
